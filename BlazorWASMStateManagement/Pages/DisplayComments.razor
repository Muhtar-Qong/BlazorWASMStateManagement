@page "/display-comments"
@inject HttpClient Http

@using BlazorWASMStateManagement.Models

<h2 class="bg-success text-white">Comments-Pagination Test</h2>

<table class="table table-sm table-bordered table-striped ">
    <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Email</th>
            <th>Body</th>
        </tr>
    </thead>
    <tbody>
        @foreach (Comment comment in comments)
        {
            <tr>
                <td>@comment.Id</td>
                <td>@comment.Name</td>
                <td>@comment.Email</td>
                <td>@comment.Body</td>
            </tr>
        }
    </tbody>
    <tfoot>
        <Pagination TotalPages="@(totalPages != 0 ? totalPages : 1)"
                    PageIndex="@State.PageIndex"
                    Radius="3"
                    OnSelectedPage="@SelectedPage">
        </Pagination>
    </tfoot>
</table>

@code {  
    [CascadingParameter]
    PageIndexStateProvider State { get; set; }

    private IEnumerable<Comment> allComments = null;
    private IEnumerable<Comment> comments = Enumerable.Empty<Comment>();

    // private int pageIndex = 1;
    private int itemsPerPage = 5;
    private int totalPages = 1;

    protected override async Task OnInitializedAsync()
    {
        allComments = await Http.GetFromJsonAsync<IEnumerable<Comment>>("https://jsonplaceholder.typicode.com/comments");
        if (allComments != null)
        {
            // Initialize the number of "totalPages"
            totalPages = (int)(allComments.Count() / itemsPerPage);

            // Initialize the "comments" which will be displayed when the page loaded first time.
            var skipCount = itemsPerPage * (State.PageIndex - 1);
            comments = allComments.Skip(skipCount).Take(itemsPerPage);
        }
    }

    private void SelectedPage(int selectedPageIndex)
    {
        if (allComments != null)
        {
            State.PageIndex = selectedPageIndex;
            var skipCount = itemsPerPage * (State.PageIndex - 1);
            comments = allComments.Skip(skipCount).Take(itemsPerPage);
        }
    }
}





